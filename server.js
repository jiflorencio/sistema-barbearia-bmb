// ===================================
// IMPORTA√á√ïES DAS BIBLIOTECAS
// ===================================
require('dotenv').config();               // ‚úÖ CARREGAR VARI√ÅVEIS DE AMBIENTE
const express = require('express');        // Framework web
const mongoose = require('mongoose');      // Banco de dados MongoDB
const cors = require('cors');              // Permitir requisi√ß√µes de outros dom√≠nios
const multer = require('multer');          // Upload de arquivos
const XLSX = require('xlsx');              // Ler arquivos Excel
const path = require('path');              // Trabalhar com caminhos de arquivos
const bcrypt = require('bcryptjs');        // Criptografar senhas
const session = require('express-session'); // Gerenciar sess√µes de login
const MongoStore = require('connect-mongo'); // Salvar sess√µes no MongoDB

// ===================================
// CONFIGURA√á√ÉO INICIAL
// ===================================
const app = express();
const PORT = process.env.PORT || 3000;

// ===================================
// MIDDLEWARES (Configura√ß√µes que rodam antes das rotas)
// ===================================
app.use(cors());                    // Permitir requisi√ß√µes AJAX
app.use(express.json());            // Ler dados JSON do corpo das requisi√ß√µes
app.use(express.static('public'));  // Servir arquivos est√°ticos (HTML, CSS, JS)

// Configura√ß√£o de sess√£o (para lembrar quem est√° logado)
app.use(session({
  secret: process.env.SESSION_SECRET || 'fallback-secret-key',  // ‚úÖ VARI√ÅVEL DE AMBIENTE
  resave: false,                        // N√£o salvar sess√£o se n√£o modificada
  saveUninitialized: false,             // N√£o criar sess√£o vazia
  store: MongoStore.create({            // Salvar sess√µes no MongoDB
    mongoUrl: process.env.MONGODB_URI   // ‚úÖ VARI√ÅVEL DE AMBIENTE
  }),
  cookie: {
    secure: false,        // true apenas com HTTPS
    httpOnly: true,       // Cookie n√£o acess√≠vel via JavaScript (seguran√ßa)
    maxAge: 24 * 60 * 60 * 1000  // 24 horas em milissegundos
  }
}));

// Configura√ß√£o do multer para upload de arquivos Excel
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// ===================================
// CONEX√ÉO COM BANCO DE DADOS
// ===================================
mongoose.connect(process.env.MONGODB_URI, {  // ‚úÖ VARI√ÅVEL DE AMBIENTE
  useNewUrlParser: true,
  useUnifiedTopology: true
});

mongoose.connection.on('connected', () => {
  console.log('‚úÖ Conectado ao MongoDB');
});

mongoose.connection.on('error', (err) => {
  console.log('‚ùå Erro na conex√£o com MongoDB:', err);
});

// ===================================
// MODELOS DO BANCO DE DADOS (Schemas)
// ===================================

// Modelo para CLIENTES da barbearia (apenas dados - n√£o fazem login)
const clienteSchema = new mongoose.Schema({
  nome: {
    type: String,
    required: true,
    trim: true
  },
  ddi: {
    type: String,
    required: true,
    trim: true,
    default: '55' // DDI padr√£o do Brasil SEM +
  },
  telefone: {
    type: String,
    required: true,
    trim: true
  },
  dataNascimento: {
    type: Date,
    required: false,  // ‚úÖ AGORA OPCIONAL para clientes vindos do hist√≥rico
    default: null
  },
  unidade: {
    type: String,
    required: false,  // ‚úÖ OPCIONAL - nem todos os clientes t√™m unidade definida
    trim: true,
    default: null     // ‚úÖ SEM UNIDADE POR PADR√ÉO
  },
  // ‚úÖ NOVO: Hist√≥rico de servi√ßos
  historicoServicos: [{
    servico: {
      type: String,
      required: true,
      trim: true
    },
    profissional: {
      type: String,
      required: true,
      trim: true
    },
    dataServico: {
      type: Date,
      required: true
    },
    adicionadoEm: {
      type: Date,
      default: Date.now
    }
  }],
  criadoEm: {
    type: Date,
    default: Date.now
  }
});

// Modelo para ADMIN (voc√™ e funcion√°rios - fazem login no sistema)
const adminSchema = new mongoose.Schema({
  nome: {
    type: String,
    required: true,
    trim: true
  },
  email: {
    type: String,
    required: true,
    unique: true,        // Email √∫nico
    trim: true,
    lowercase: true      // Converter para min√∫sculo
  },
  senha: {
    type: String,
    required: true
  },
  tipo: {
    type: String,
    enum: ['admin', 'funcionario'],  // Apenas estes valores
    default: 'admin'
  },
  ativo: {
    type: Boolean,
    default: true        // Para desativar funcion√°rios se necess√°rio
  },
  criadoEm: {
    type: Date,
    default: Date.now
  }
});

// MIDDLEWARE DO SCHEMA: Criptografar senha antes de salvar
adminSchema.pre('save', async function(next) {
  // Se a senha n√£o foi modificada, pular
  if (!this.isModified('senha')) return next();
  
  // Criptografar a senha
  this.senha = await bcrypt.hash(this.senha, 12);
  next();
});

// M√âTODO DO SCHEMA: Verificar se senha est√° correta
adminSchema.methods.verificarSenha = async function(senhaCandidata) {
  return await bcrypt.compare(senhaCandidata, this.senha);
};

// Modelo para COMUNICA√á√ïES (hist√≥rico de mensagens enviadas via WhatsApp)
const comunicacaoSchema = new mongoose.Schema({
  titulo: {
    type: String,
    required: true,
    trim: true
  },
  totalClientes: {
    type: Number,
    required: true,
    default: 0
  },
  clientesEncontrados: {
    type: Number,
    required: true,
    default: 0
  },
  clientesNaoEncontrados: {
    type: Number,
    required: true,
    default: 0
  },
  clientes: [{
    numeroOriginal: {
      type: String,
      required: true,
      trim: true
    },
    encontrado: {
      type: Boolean,
      required: true,
      default: false
    },
    clienteId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Cliente',
      required: false
    },
    cliente: {
      type: Object,
      required: false
    }
  }],
  realizados: [{
    clienteId: {
      type: String, // Pode ser ObjectId ou √≠ndice do array para clientes n√£o encontrados
      required: true
    },
    realizado: {
      type: Boolean,
      default: true
    },
    dataRealizacao: {
      type: Date,
      default: Date.now
    }
  }],
  criadoEm: {
    type: Date,
    default: Date.now
  }
});

// ===================================
// üÜï NOVO MODELO: ESTAT√çSTICAS DE MOVIMENTOS
// ===================================
const estatisticasMovimentoSchema = new mongoose.Schema({
  ultimaImportacao: {
    type: Date,
    default: null
  },
  totalMovimentos: {
    type: Number,
    default: 0
  },
  movimentosEsteMes: {
    type: Number,
    default: 0
  },
  mesReferencia: {
    type: String, // YYYY-MM formato
    default: () => {
      const now = new Date();
      return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}`;
    }
  },
  ultimoArquivoImportado: {
    type: String,
    default: null
  },
  atualizadoEm: {
    type: Date,
    default: Date.now
  }
});

// ===================================
// üÜï NOVO MODELO: ESTAT√çSTICAS DE CADASTRO
// ===================================
const estatisticasCadastroSchema = new mongoose.Schema({
  ultimaImportacao: {
    type: Date,
    default: null
  },
  totalClientes: {
    type: Number,
    default: 0
  },
  clientesEsteMes: {
    type: Number,
    default: 0
  },
  mesReferencia: {
    type: String, // YYYY-MM formato
    default: () => {
      const now = new Date();
      return `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}`;
    }
  },
  ultimoArquivoImportado: {
    type: String,
    default: null
  },
  atualizadoEm: {
    type: Date,
    default: Date.now
  }
});

// ===================================
// üÜï NOVO MODELO: HIST√ìRICO DE IMPORTA√á√ïES DE MOVIMENTO
// ===================================
const historicoMovimentoSchema = new mongoose.Schema({
  dataImportacao: {
    type: Date,
    default: Date.now
  },
  nomeArquivo: {
    type: String,
    required: true
  },
  servicosAdicionados: {
    type: Number,
    default: 0
  },
  clientesAtualizados: {
    type: Number,
    default: 0
  },
  clientesNovos: {
    type: Number,
    default: 0
  },
  totalLinhasProcessadas: {
    type: Number,
    default: 0
  },
  totalErros: {
    type: Number,
    default: 0
  },
  usuarioImportacao: {
    type: String,
    required: true
  }
});

// ===================================
// üÜï NOVO MODELO: HIST√ìRICO DE IMPORTA√á√ïES DE CADASTRO
// ===================================
const historicoCadastroSchema = new mongoose.Schema({
  dataImportacao: {
    type: Date,
    default: Date.now
  },
  nomeArquivo: {
    type: String,
    required: true
  },
  clientesAdicionados: {
    type: Number,
    default: 0
  },
  clientesJaExistiam: {
    type: Number,
    default: 0
  },
  totalLinhasProcessadas: {
    type: Number,
    default: 0
  },
  totalErros: {
    type: Number,
    default: 0
  },
  usuarioImportacao: {
    type: String,
    required: true
  }
});

// Criar os modelos
const Cliente = mongoose.model('Cliente', clienteSchema);
const Admin = mongoose.model('Admin', adminSchema);
const Comunicacao = mongoose.model('Comunicacao', comunicacaoSchema);
const EstatisticasMovimento = mongoose.model('EstatisticasMovimento', estatisticasMovimentoSchema);
const EstatisticasCadastro = mongoose.model('EstatisticasCadastro', estatisticasCadastroSchema);
const HistoricoMovimento = mongoose.model('HistoricoMovimento', historicoMovimentoSchema);
const HistoricoCadastro = mongoose.model('HistoricoCadastro', historicoCadastroSchema);

// ===================================
// MIDDLEWARE DE AUTENTICA√á√ÉO
// ===================================

// Verificar se usu√°rio est√° logado
const verificarLogin = async (req, res, next) => {
  try {
    // Verificar se existe ID do admin na sess√£o
    if (!req.session.adminId) {
      return res.status(401).json({ erro: 'Acesso negado. Fa√ßa login primeiro.' });
    }

    // Buscar admin no banco
    const admin = await Admin.findById(req.session.adminId);
    if (!admin || !admin.ativo) {
      req.session.destroy(); // Destruir sess√£o inv√°lida
      return res.status(401).json({ erro: 'Admin n√£o encontrado ou desativado.' });
    }

    req.admin = admin; // Adicionar admin na requisi√ß√£o
    next(); // Continuar para pr√≥xima fun√ß√£o
  } catch (error) {
    res.status(401).json({ erro: 'Erro de autentica√ß√£o.' });
  }
};

// ===================================
// ROTAS DE P√ÅGINAS (HTML)
// ===================================

// P√°gina inicial: Login ou Dashboard
app.get('/', (req, res) => {
  // Se j√° est√° logado, ir para dashboard
  if (req.session.adminId) {
    return res.redirect('/dashboard');
  }
  
  // Se n√£o est√° logado, mostrar login
  res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// Dashboard (√°rea restrita)
app.get('/dashboard', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'dashboard.html'));
});

// P√°gina de Atualizar Dados
app.get('/atualizar-dados', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'atualizar-dados.html'));
});

// P√°gina de Consultar Dados
app.get('/consultar-dados', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'consultar-dados.html'));
});

// ‚úÖ NOVA: P√°gina de Detalhes do Cliente
app.get('/cliente-detalhes', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'cliente-detalhes.html'));
});

// ‚úÖ NOVA: P√°gina de Comunica√ß√£o Clientes
app.get('/comunicacao-clientes', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'comunicacao-clientes.html'));
});

// ‚úÖ NOVA: P√°gina de Detalhes da Comunica√ß√£o
app.get('/comunicacao-detalhes', (req, res) => {
  if (!req.session.adminId) {
    return res.redirect('/');
  }
  res.sendFile(path.join(__dirname, 'public', 'comunicacao-detalhes.html'));
});

// ===================================
// ROTAS DA API - AUTENTICA√á√ÉO
// ===================================

// Fazer login
app.post('/api/login', async (req, res) => {
  try {
    const { email, senha } = req.body;

    if (!email || !senha) {
      return res.status(400).json({ erro: 'Email e senha s√£o obrigat√≥rios.' });
    }

    // Buscar admin por email
    const admin = await Admin.findOne({ email, ativo: true });
    if (!admin || !(await admin.verificarSenha(senha))) {
      return res.status(401).json({ erro: 'Email ou senha incorretos.' });
    }

    // Criar sess√£o
    req.session.adminId = admin._id;

    res.json({
      mensagem: 'Login realizado com sucesso!',
      admin: {
        nome: admin.nome,
        email: admin.email,
        tipo: admin.tipo
      }
    });
  } catch (error) {
    res.status(500).json({ erro: 'Erro no login.' });
  }
});

// Fazer logout
app.post('/api/logout', (req, res) => {
  req.session.destroy((err) => {
    if (err) {
      return res.status(500).json({ erro: 'Erro ao fazer logout.' });
    }
    res.json({ mensagem: 'Logout realizado com sucesso!' });
  });
});

// Verificar se est√° logado
app.get('/api/auth-status', async (req, res) => {
  try {
    if (!req.session.adminId) {
      return res.json({ logado: false });
    }

    const admin = await Admin.findById(req.session.adminId);
    if (!admin || !admin.ativo) {
      req.session.destroy();
      return res.json({ logado: false });
    }

    res.json({
      logado: true,
      admin: {
        nome: admin.nome,
        email: admin.email,
        tipo: admin.tipo
      }
    });
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao verificar autentica√ß√£o.' });
  }
});

// ===================================
// ROTAS DA API - GEST√ÉO DE ADMINS (PROTEGIDAS)
// ===================================

// Listar admins (apenas para admin principal)
app.get('/api/admins', verificarLogin, async (req, res) => {
  try {
    // Verificar se √© admin principal
    if (req.admin.tipo !== 'admin') {
      return res.status(403).json({ erro: 'Acesso negado.' });
    }

    const admins = await Admin.find({}, '-senha').sort({ nome: 1 });
    res.json(admins);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar admins.' });
  }
});

// Criar novo admin (apenas para admin principal)
app.post('/api/admins', verificarLogin, async (req, res) => {
  try {
    // Verificar se √© admin principal
    if (req.admin.tipo !== 'admin') {
      return res.status(403).json({ erro: 'Apenas o administrador principal pode criar novos usu√°rios.' });
    }

    const { nome, email, senha, tipo } = req.body;
    
    if (!nome || !email || !senha) {
      return res.status(400).json({ erro: 'Nome, email e senha s√£o obrigat√≥rios.' });
    }

    if (senha.length < 6) {
      return res.status(400).json({ erro: 'A senha deve ter pelo menos 6 caracteres.' });
    }

    // Verificar se email j√° existe
    const adminExistente = await Admin.findOne({ email });
    if (adminExistente) {
      return res.status(400).json({ erro: 'Este email j√° est√° sendo usado.' });
    }

    const novoAdmin = new Admin({
      nome,
      email,
      senha, // Ser√° criptografada automaticamente
      tipo: tipo || 'funcionario'
    });

    await novoAdmin.save();

    res.status(201).json({
      mensagem: 'Admin criado com sucesso!',
      admin: {
        nome: novoAdmin.nome,
        email: novoAdmin.email,
        tipo: novoAdmin.tipo
      }
    });
  } catch (error) {
    if (error.code === 11000) {
      return res.status(400).json({ erro: 'Este email j√° est√° sendo usado.' });
    }
    res.status(500).json({ erro: 'Erro ao criar admin.' });
  }
});

// Atualizar admin
app.put('/api/admins/:id', verificarLogin, async (req, res) => {
  try {
    if (req.admin.tipo !== 'admin') {
      return res.status(403).json({ erro: 'Acesso negado.' });
    }

    const { nome, email, ativo } = req.body;
    
    const adminAtualizado = await Admin.findByIdAndUpdate(
      req.params.id,
      { nome, email, ativo },
      { new: true, select: '-senha' }
    );

    if (!adminAtualizado) {
      return res.status(404).json({ erro: 'Admin n√£o encontrado.' });
    }

    res.json(adminAtualizado);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao atualizar admin.' });
  }
});

// ===================================
// üÜï ROTAS DA API - ESTAT√çSTICAS DE MOVIMENTO (PROTEGIDAS)
// ===================================

// Buscar estat√≠sticas de movimento
app.get('/api/estatisticas-movimento', verificarLogin, async (req, res) => {
  try {
    let stats = await EstatisticasMovimento.findOne();
    
    if (!stats) {
      // Criar estat√≠sticas iniciais se n√£o existir
      stats = new EstatisticasMovimento();
      await stats.save();
    }
    
    // Verificar se mudou o m√™s (resetar contador mensal)
    const mesAtual = new Date().toISOString().slice(0, 7); // YYYY-MM
    if (stats.mesReferencia !== mesAtual) {
      stats.mesReferencia = mesAtual;
      stats.movimentosEsteMes = 0;
      await stats.save();
    }
    
    res.json(stats);
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas:', error);
    res.status(500).json({ erro: 'Erro ao buscar estat√≠sticas de movimento.' });
  }
});

// üÜï NOVA ROTA: Buscar hist√≥rico completo de movimento
app.get('/api/historico-movimento', verificarLogin, async (req, res) => {
  try {
    const historico = await HistoricoMovimento.find()
      .sort({ dataImportacao: -1 })
      .limit(50); // √öltimas 50 importa√ß√µes
    
    // Calcular estat√≠sticas do hist√≥rico
    const totalMovimentos = await HistoricoMovimento.aggregate([
      { $group: { _id: null, total: { $sum: "$servicosAdicionados" } } }
    ]);
    
    const ultimaImportacao = historico.length > 0 ? historico[0] : null;
    
    res.json({
      historico,
      estatisticas: {
        ultimaImportacao: ultimaImportacao ? ultimaImportacao.dataImportacao : null,
        totalMovimentos: totalMovimentos.length > 0 ? totalMovimentos[0].total : 0,
        totalImportacoes: historico.length
      }
    });
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico de movimento:', error);
    res.status(500).json({ erro: 'Erro ao buscar hist√≥rico de movimento.' });
  }
});

// üÜï NOVA ROTA: Buscar hist√≥rico completo de cadastro
app.get('/api/historico-cadastro', verificarLogin, async (req, res) => {
  try {
    const historico = await HistoricoCadastro.find()
      .sort({ dataImportacao: -1 })
      .limit(50); // √öltimas 50 importa√ß√µes
    
    // Calcular estat√≠sticas do hist√≥rico
    const totalClientes = await HistoricoCadastro.aggregate([
      { $group: { _id: null, total: { $sum: "$clientesAdicionados" } } }
    ]);
    
    const ultimaImportacao = historico.length > 0 ? historico[0] : null;
    
    res.json({
      historico,
      estatisticas: {
        ultimaImportacao: ultimaImportacao ? ultimaImportacao.dataImportacao : null,
        totalClientes: totalClientes.length > 0 ? totalClientes[0].total : 0,
        totalImportacoes: historico.length
      }
    });
  } catch (error) {
    console.error('Erro ao buscar hist√≥rico de cadastro:', error);
    res.status(500).json({ erro: 'Erro ao buscar hist√≥rico de cadastro.' });
  }
});

// ===================================
// üÜï ROTAS DA API - ESTAT√çSTICAS DE CADASTRO (PROTEGIDAS)
// ===================================

// Buscar estat√≠sticas de cadastro
app.get('/api/estatisticas-cadastro', verificarLogin, async (req, res) => {
  try {
    let stats = await EstatisticasCadastro.findOne();
    
    if (!stats) {
      // Criar estat√≠sticas iniciais se n√£o existir
      const totalClientesAtual = await Cliente.countDocuments();
      stats = new EstatisticasCadastro({
        totalClientes: totalClientesAtual
      });
      await stats.save();
    }
    
    // Verificar se mudou o m√™s (resetar contador mensal)
    const mesAtual = new Date().toISOString().slice(0, 7); // YYYY-MM
    if (stats.mesReferencia !== mesAtual) {
      stats.mesReferencia = mesAtual;
      stats.clientesEsteMes = 0;
      await stats.save();
    }
    
    // Sempre atualizar o total com a contagem real
    const totalClientesAtual = await Cliente.countDocuments();
    if (stats.totalClientes !== totalClientesAtual) {
      stats.totalClientes = totalClientesAtual;
      await stats.save();
    }
    
    res.json(stats);
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas de cadastro:', error);
    res.status(500).json({ erro: 'Erro ao buscar estat√≠sticas de cadastro.' });
  }
});

// ===================================
// ROTAS DA API - CLIENTES (PROTEGIDAS)
// ===================================

// Listar todos os clientes
app.get('/api/clientes', verificarLogin, async (req, res) => {
  try {
    const clientes = await Cliente.find().sort({ nome: 1 });
    res.json(clientes);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar clientes.' });
  }
});

// Buscar cliente por ID
app.get('/api/clientes/:id', verificarLogin, async (req, res) => {
  try {
    const cliente = await Cliente.findById(req.params.id);
    if (!cliente) {
      return res.status(404).json({ erro: 'Cliente n√£o encontrado.' });
    }
    res.json(cliente);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar cliente.' });
  }
});

// Criar novo cliente
app.post('/api/clientes', verificarLogin, async (req, res) => {
  try {
    const { nome, ddi, telefone, dataNascimento } = req.body;
    
    // Validar dados obrigat√≥rios
    if (!nome || !ddi || !telefone || !dataNascimento) {
      return res.status(400).json({ erro: 'Nome, DDI, telefone e data de nascimento s√£o obrigat√≥rios.' });
    }
    
    // üîß CORRE√á√ÉO: Limpar DDI removendo + se houver e definir padr√£o
    let ddiLimpo = ddi.toString().trim().replace(/^\+/, ''); // Remove + do in√≠cio
    if (!ddiLimpo || ddiLimpo === '') {
      ddiLimpo = '55'; // Padr√£o Brasil se vazio
    }
    
    // ‚úÖ NOVO: Formatar telefone no padr√£o (xx) xxxxx-xxxx
    const telefoneLimpo = formatarTelefone(telefone.toString().trim());
    
    // VERIFICAR SE TELEFONE J√Å EXISTE (DDI + Telefone)
    const telefoneCompleto = `${ddiLimpo} ${telefoneLimpo}`;
    console.log(`üîç Verificando duplicata para telefone completo: "${telefoneCompleto}"`);
    
    // Primeira verifica√ß√£o: DDI + telefone exato
    let clienteExistente = await Cliente.findOne({ 
      ddi: ddiLimpo, 
      telefone: telefoneLimpo 
    });
    
    // Segunda verifica√ß√£o: apenas n√∫meros do telefone (para compatibilidade)
    if (!clienteExistente) {
      const telefoneApenasNumeros = telefoneLimpo.replace(/\D/g, '');
      console.log(`üîç Verificando tamb√©m apenas n√∫meros: "${telefoneApenasNumeros}"`);
      
      clienteExistente = await Cliente.findOne({ 
        telefone: { $regex: telefoneApenasNumeros, $options: 'i' } 
      });
    }
    
    if (clienteExistente) {
      console.log(`‚ùå Telefone j√° existe para cliente: ${clienteExistente.nome}`);
      return res.status(400).json({ 
        erro: `Telefone "${telefoneCompleto}" j√° est√° cadastrado para o cliente: ${clienteExistente.nome}` 
      });
    }
    
    console.log(`‚úÖ Telefone "${telefoneCompleto}" √© novo, pode adicionar`);
    
    // Criar cliente
    const novoCliente = new Cliente({
      nome: nome.trim(),
      ddi: ddiLimpo,
      telefone: telefoneLimpo,
      dataNascimento: new Date(dataNascimento)
    });
    
    await novoCliente.save();
    console.log(`‚úÖ Cliente "${nome}" adicionado com sucesso`);
    
    res.status(201).json(novoCliente);
  } catch (error) {
    console.error('‚ùå Erro ao criar cliente:', error);
    res.status(400).json({ erro: 'Erro ao criar cliente.' });
  }
});

// Atualizar cliente
app.put('/api/clientes/:id', verificarLogin, async (req, res) => {
  try {
    const { nome, ddi, telefone, dataNascimento, unidade } = req.body;
    
    // ‚úÖ CORRE√á√ÉO: Data de nascimento agora √© opcional
    if (!nome || !ddi || !telefone) {
      return res.status(400).json({ erro: 'Nome, DDI e telefone s√£o obrigat√≥rios. Data de nascimento e unidade s√£o opcionais.' });
    }
    
    // üîß CORRE√á√ÉO: Limpar DDI removendo + se houver e definir padr√£o
    let ddiLimpo = ddi.toString().trim().replace(/^\+/, ''); // Remove + do in√≠cio
    if (!ddiLimpo || ddiLimpo === '') {
      ddiLimpo = '55'; // Padr√£o Brasil se vazio
    }
    
    // ‚úÖ NOVO: Formatar telefone no padr√£o (xx) xxxxx-xxxx
    const telefoneLimpo = formatarTelefone(telefone.toString().trim());
    const unidadeLimpa = unidade && unidade.toString().trim() !== '' ? unidade.toString().trim() : null;
    
    // ‚úÖ PROCESSAR DATA DE NASCIMENTO (PODE SER NULL)
    let dataConvertida = null;
    if (dataNascimento && dataNascimento.toString().trim() !== '') {
      try {
        dataConvertida = new Date(dataNascimento);
        // Validar se a data √© v√°lida
        if (isNaN(dataConvertida.getTime())) {
          dataConvertida = null;
        }
      } catch (error) {
        dataConvertida = null;
      }
    }
    
    // VERIFICAR SE TELEFONE J√Å EXISTE (exceto para o pr√≥prio cliente)
    const telefoneCompleto = `${ddiLimpo} ${telefoneLimpo}`;
    console.log(`üîç Verificando duplicata para telefone: "${telefoneCompleto}" (editando cliente ${req.params.id})`);
    
    // Primeira verifica√ß√£o: DDI + telefone exato
    let clienteExistente = await Cliente.findOne({ 
      ddi: ddiLimpo,
      telefone: telefoneLimpo,
      _id: { $ne: req.params.id } // Excluir o pr√≥prio cliente da busca
    });
    
    // Segunda verifica√ß√£o: apenas n√∫meros
    if (!clienteExistente) {
      const telefoneApenasNumeros = telefoneLimpo.replace(/\D/g, '');
      
      clienteExistente = await Cliente.findOne({ 
        telefone: { $regex: telefoneApenasNumeros, $options: 'i' },
        _id: { $ne: req.params.id } // Excluir o pr√≥prio cliente da busca
      });
    }
    
    if (clienteExistente) {
      console.log(`‚ùå Telefone j√° existe para outro cliente: ${clienteExistente.nome}`);
      return res.status(400).json({ 
        erro: `Telefone "${telefoneCompleto}" j√° est√° cadastrado para outro cliente: ${clienteExistente.nome}` 
      });
    }
    
    // Atualizar cliente
    const clienteAtualizado = await Cliente.findByIdAndUpdate(
      req.params.id,
      {
        nome: nome.trim(),
        ddi: ddiLimpo,
        telefone: telefoneLimpo,
        dataNascimento: dataConvertida, // ‚úÖ PODE SER NULL
        unidade: unidadeLimpa // ‚úÖ NOVO: Incluir unidade na atualiza√ß√£o
      },
      { new: true }
    );
    
    if (!clienteAtualizado) {
      return res.status(404).json({ erro: 'Cliente n√£o encontrado.' });
    }
    
    console.log(`‚úÖ Cliente "${nome}" atualizado com sucesso (unidade: ${unidadeLimpa || 'N/A'})`);
    res.json(clienteAtualizado);
  } catch (error) {
    console.error('‚ùå Erro ao atualizar cliente:', error);
    res.status(400).json({ erro: 'Erro ao atualizar cliente.' });
  }
});

// Deletar cliente
app.delete('/api/clientes/:id', verificarLogin, async (req, res) => {
  try {
    const clienteDeletado = await Cliente.findByIdAndDelete(req.params.id);
    
    if (!clienteDeletado) {
      return res.status(404).json({ erro: 'Cliente n√£o encontrado.' });
    }
    
    res.json({ mensagem: 'Cliente deletado com sucesso.' });
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao deletar cliente.' });
  }
});

// ===================================
// UPLOAD DE EXCEL - VERS√ÉO CORRIGIDA E MELHORADA
// ===================================
app.post('/api/upload-excel', verificarLogin, upload.single('excel'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ erro: 'Nenhum arquivo enviado.' });
    }
    
    // Ler arquivo Excel
    const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // Converter para JSON
    const dados = XLSX.utils.sheet_to_json(worksheet);
    
    if (dados.length === 0) {
      return res.status(400).json({ erro: 'Arquivo Excel est√° vazio ou n√£o possui dados v√°lidos.' });
    }
    
    let clientesInseridos = 0;
    let clientesJaExistem = 0;
    let erros = [];
    let sucessos = [];
    
    console.log(`üìä Processando ${dados.length} linhas do Excel...`);
    
    // DEBUG: Mostrar estrutura da primeira linha para diagn√≥stico
    console.log('üìã Estrutura da primeira linha:', dados[0]);
    console.log('üìã Chaves dispon√≠veis:', Object.keys(dados[0]));
    
    // DEBUG: Mostrar todos os telefones j√° cadastrados
    const telefonesExistentes = await Cliente.find({}, 'nome telefone ddi').lean();
    console.log(`üì± Telefones j√° cadastrados no banco:`, telefonesExistentes.map(c => `${c.nome}: ${c.ddi || '+55'} ${c.telefone}`));
    
    for (let i = 0; i < dados.length; i++) {
      const linha = dados[i];
      const numeroLinha = i + 2; // +2 porque linha 1 √© cabe√ßalho e arrays come√ßam em 0
      
      try {
        // üîß MAPEAMENTO MELHORADO DE COLUNAS
        // Buscar nome
        const nome = linha.Nome || linha.nome || linha.NOME || 
                    linha['Nome Completo'] || linha.name || linha.Name || 
                    linha['NOME COMPLETO'] || linha['Nome completo'] || null;
        
        // Buscar DDI (com valor padr√£o SEM +)
        const ddi = linha.DDI || linha.ddi || linha['C√≥digo Pa√≠s'] || 
                   linha['CODIGO PAIS'] || linha.country_code || '55';
        
        // Buscar telefone
        const telefone = linha.Telefone || linha.telefone || linha.TELEFONE || 
                        linha.phone || linha.celular || linha.Celular || 
                        linha.CELULAR || linha['N√∫mero'] || linha.numero || null;
        
        // Buscar data de nascimento
        const dataNascimento = linha['Data de Nascimento'] || linha.dataNascimento || 
                              linha['DATA DE NASCIMENTO'] || linha.nascimento || 
                              linha.birthday || linha.birth || linha.Nascimento ||
                              linha['Data Nascimento'] || linha['DATA_NASCIMENTO'] || null;
        
        // ‚úÖ NOVO: Buscar data de cadastro da planilha
        const dataCadastro = linha.Cadastro || linha.cadastro || linha.CADASTRO || 
                           linha['Data Cadastro'] || linha['DATA CADASTRO'] || 
                           linha['Data de Cadastro'] || linha['DATA DE CADASTRO'] || null;
        
        // üîß VALIDA√á√ÉO CORRIGIDA - APENAS TELEFONE √â OBRIGAT√ìRIO
        const telefoneValido = telefone && telefone.toString().trim() !== '' && telefone.toString().toLowerCase() !== 'vazio';
        
        // Debug detalhado para linha com problema
        if (!telefoneValido) {
          console.log(`üö® LINHA ${numeroLinha} - DEBUG:`);
          console.log(`   Nome encontrado: "${nome || 'N/A'}"`);
          console.log(`   Telefone encontrado: "${telefone}" | V√°lido: ${telefoneValido}`);
          console.log(`   Data encontrada: "${dataNascimento || 'N/A'}"`);
          console.log(`   Objeto completo:`, linha);
        }
        
        // APENAS TELEFONE √â OBRIGAT√ìRIO
        if (!telefoneValido) {
          erros.push(`Linha ${numeroLinha}: Telefone obrigat√≥rio est√° vazio ou inv√°lido - Telefone: "${telefone || 'VAZIO'}"`);
          continue;
        }
        
        // üîß LIMPEZA E VALIDA√á√ÉO MELHORADA DO DDI
        const nomeLimpo = nome ? nome.toString().trim() : 'Cliente sem nome'; // ‚úÖ PADR√ÉO se vazio
        let ddiLimpo = ddi ? ddi.toString().trim() : '55'; // ‚úÖ PADR√ÉO se vazio
        // üîß REMOVER + DO DDI SE HOUVER
        ddiLimpo = ddiLimpo.replace(/^\+/, ''); // Remove + do in√≠cio
        if (!ddiLimpo || ddiLimpo === '') {
          ddiLimpo = '55'; // Padr√£o Brasil se ficar vazio
        }
        
        // ‚úÖ NOVO: Formatar telefone no padr√£o (xx) xxxxx-xxxx
        const telefoneLimpo = formatarTelefone(telefone.toString().trim());
        
        // Validar tamanho m√≠nimo do telefone
        const telefoneApenasNumeros = telefoneLimpo.replace(/\D/g, '');
        if (telefoneApenasNumeros.length < 8) {
          erros.push(`Linha ${numeroLinha}: Telefone "${telefoneLimpo}" parece inv√°lido (muito curto: ${telefoneApenasNumeros.length} d√≠gitos)`);
          continue;
        }
        
        // üîß VERIFICA√á√ÉO DE DUPLICATA MELHORADA
        console.log(`üîç Verificando duplicata para: "${ddiLimpo} ${telefoneLimpo}"`);
        
        // Buscar por DDI + telefone exato
        let clienteExistente = await Cliente.findOne({ 
          ddi: ddiLimpo, 
          telefone: telefoneLimpo 
        });
        
        // Se n√£o encontrou, buscar apenas por n√∫meros do telefone (compatibilidade)
        if (!clienteExistente) {
          console.log(`üîç Verificando tamb√©m apenas n√∫meros: "${telefoneApenasNumeros}"`);
          
          clienteExistente = await Cliente.findOne({ 
            $or: [
              { telefone: { $regex: telefoneApenasNumeros, $options: 'i' } },
              { telefone: telefoneLimpo },
              { telefone: telefoneApenasNumeros }
            ]
          });
        }
        
        if (clienteExistente) {
          clientesJaExistem++;
          console.log(`‚ùå Telefone "${ddiLimpo} ${telefoneLimpo}" j√° existe para cliente: ${clienteExistente.nome}`);
          erros.push(`Linha ${numeroLinha}: Cliente "${nomeLimpo}" n√£o foi adicionado - telefone "${ddiLimpo} ${telefoneLimpo}" j√° cadastrado para: ${clienteExistente.nome}`);
          continue;
        }
        
        console.log(`‚úÖ Telefone "${ddiLimpo} ${telefoneLimpo}" √© novo, pode adicionar`);
        
        // üîß VALIDA√á√ÉO DE DATA MELHORADA - OPCIONAL (PODE SER NULL)
        let dataConvertida = null; // ‚úÖ AGORA SER√Å NULL SE N√ÉO INFORMADA
        
        if (dataNascimento && dataNascimento.toString().trim() !== '' && dataNascimento.toString().toLowerCase() !== 'vazio') {
          try {
            const dataString = dataNascimento.toString().trim();
            
            // Diferentes formatos poss√≠veis
            if (dataString.includes('/')) {
              // Formato brasileiro DD/MM/YYYY
              const partes = dataString.split('/');
              if (partes.length === 3) {
                const [dia, mes, ano] = partes;
                dataConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`);
              }
            } else if (dataString.includes('-')) {
              // Formato DD-MM-YYYY ou YYYY-MM-DD
              const partes = dataString.split('-');
              if (partes.length === 3) {
                if (partes[0].length === 4) {
                  // YYYY-MM-DD
                  dataConvertida = new Date(dataString);
                } else {
                  // DD-MM-YYYY
                  const [dia, mes, ano] = partes;
                  dataConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}`);
                }
              }
            } else {
              // Tentar convers√£o direta
              dataConvertida = new Date(dataString);
            }
            
            // Validar se a data √© v√°lida
            if (isNaN(dataConvertida.getTime())) {
              console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Data "${dataString}" inv√°lida, deixando sem data de nascimento`);
              dataConvertida = null; // ‚úÖ NULL EM VEZ DE DATA PADR√ÉO
            } else {
              // Verificar se a data faz sentido
              const anoNascimento = dataConvertida.getFullYear();
              const anoAtual = new Date().getFullYear();
              if (anoNascimento < 1900 || anoNascimento > anoAtual) {
                console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Ano ${anoNascimento} suspeito, deixando sem data de nascimento`);
                dataConvertida = null; // ‚úÖ NULL EM VEZ DE DATA PADR√ÉO
              }
            }
            
          } catch (error) {
            console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Erro ao processar data "${dataNascimento}", deixando sem data de nascimento`);
            dataConvertida = null; // ‚úÖ NULL EM VEZ DE DATA PADR√ÉO
          }
        } else {
          console.log(`‚ÑπÔ∏è Linha ${numeroLinha}: Data de nascimento n√£o informada, deixando como "N√£o Informado"`);
        }
        
        // ‚úÖ NOVO: PROCESSAR DATA DE CADASTRO DA PLANILHA
        let dataCadastroConvertida = new Date(); // Data atual como padr√£o
        
        if (dataCadastro && dataCadastro.toString().trim() !== '' && dataCadastro.toString().toLowerCase() !== 'vazio') {
          try {
            const cadastroString = dataCadastro.toString().trim();
            console.log(`üìÖ Linha ${numeroLinha}: Processando data de cadastro: "${cadastroString}"`);
            
            // Diferentes formatos poss√≠veis para data de cadastro
            if (cadastroString.includes('/')) {
              // Formato brasileiro DD/MM/YYYY ou DD/MM/YYYY HH:MM
              const partes = cadastroString.split(' ');
              const dataPartes = partes[0].split('/');
              
              if (dataPartes.length === 3) {
                const [dia, mes, ano] = dataPartes;
                // Usar apenas a data, ignorando a hora (meio-dia para evitar problemas de timezone)
                dataCadastroConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}T12:00:00.000Z`);
              }
            } else if (cadastroString.includes('-')) {
              // Formato YYYY-MM-DD ou similar
              const partes = cadastroString.split(' ');
              const dataPartes = partes[0].split('-');
              
              if (dataPartes.length === 3) {
                if (dataPartes[0].length === 4) {
                  // YYYY-MM-DD
                  dataCadastroConvertida = new Date(`${dataPartes[0]}-${dataPartes[1].padStart(2, '0')}-${dataPartes[2].padStart(2, '0')}T12:00:00.000Z`);
                } else {
                  // DD-MM-YYYY
                  const [dia, mes, ano] = dataPartes;
                  dataCadastroConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}T12:00:00.000Z`);
                }
              }
            } else {
              // Tentar convers√£o direta
              dataCadastroConvertida = new Date(cadastroString);
              // Se tem hor√°rio, manter apenas a data
              if (!isNaN(dataCadastroConvertida.getTime())) {
                dataCadastroConvertida = new Date(dataCadastroConvertida.getFullYear(), dataCadastroConvertida.getMonth(), dataCadastroConvertida.getDate(), 12, 0, 0, 0);
              }
            }
            
            // Validar se a data √© v√°lida
            if (isNaN(dataCadastroConvertida.getTime())) {
              console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Data de cadastro "${cadastroString}" inv√°lida, usando data atual`);
              dataCadastroConvertida = new Date();
            } else {
              // Verificar se a data faz sentido (n√£o pode ser futura nem muito antiga)
              const anoAtual = new Date().getFullYear();
              const anoCadastro = dataCadastroConvertida.getFullYear();
              if (anoCadastro < 2020 || anoCadastro > anoAtual) {
                console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Ano de cadastro ${anoCadastro} suspeito, usando data atual`);
                dataCadastroConvertida = new Date();
              } else {
                console.log(`‚úÖ Linha ${numeroLinha}: Data de cadastro processada: ${dataCadastroConvertida.toISOString().split('T')[0]}`);
              }
            }
            
          } catch (error) {
            console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Erro ao processar data de cadastro "${dataCadastro}", usando data atual`);
            dataCadastroConvertida = new Date();
          }
        } else {
          console.log(`‚ÑπÔ∏è Linha ${numeroLinha}: Data de cadastro n√£o informada, usando data atual`);
        }
        
        // üîß CRIAR NOVO CLIENTE COM DATA DE CADASTRO DA PLANILHA
        const novoCliente = new Cliente({
          nome: nomeLimpo,
          ddi: ddiLimpo,
          telefone: telefoneLimpo,
          dataNascimento: dataConvertida,
          unidade: null,  // ‚úÖ SEM UNIDADE - ser√° definida depois manualmente
          criadoEm: dataCadastroConvertida  // ‚úÖ USAR DATA DA PLANILHA AO INV√âS DA ATUAL
        });
        
        await novoCliente.save();
        clientesInseridos++;
        sucessos.push(`‚úÖ ${nomeLimpo} - ${ddiLimpo} ${telefoneLimpo}`);
        
        console.log(`‚úÖ Cliente ${clientesInseridos}: ${nomeLimpo} adicionado com sucesso`);
        
      } catch (error) {
        erros.push(`Linha ${numeroLinha}: Erro ao salvar - ${error.message}`);
        console.error(`‚ùå Erro na linha ${numeroLinha}:`, error);
      }
    }
    
        // üÜï NOVO: SALVAR NO HIST√ìRICO DE CADASTRO
    if (clientesInseridos > 0 || erros.length > 0) {
      try {
        // Criar registro no hist√≥rico
        const novoHistorico = new HistoricoCadastro({
          dataImportacao: new Date(),
          nomeArquivo: req.file.originalname || 'Arquivo Excel',
          clientesAdicionados: clientesInseridos,
          clientesJaExistiam: clientesJaExistem,
          totalLinhasProcessadas: dados.length,
          totalErros: erros.length,
          usuarioImportacao: req.admin.nome || 'Admin'
        });
        
        await novoHistorico.save();
        
        // Atualizar estat√≠sticas existentes (compatibilidade)
        let stats = await EstatisticasCadastro.findOne();
        if (!stats) {
          stats = new EstatisticasCadastro();
        }
        
        const mesAtual = new Date().toISOString().slice(0, 7);
        if (stats.mesReferencia !== mesAtual) {
          stats.mesReferencia = mesAtual;
          stats.clientesEsteMes = 0;
        }
        
        stats.ultimaImportacao = new Date();
        stats.totalClientes += clientesInseridos;
        stats.clientesEsteMes += clientesInseridos;
        stats.ultimoArquivoImportado = req.file.originalname || 'Arquivo Excel';
        stats.atualizadoEm = new Date();
        
        await stats.save();
        
        console.log(`‚úÖ Hist√≥rico e estat√≠sticas de cadastro atualizados: +${clientesInseridos} clientes`);
        
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao atualizar hist√≥rico de cadastro (n√£o cr√≠tico):', error);
      }
    }
    
    // üîß RESPOSTA DETALHADA MELHORADA
    const mensagem = `üìä Processamento conclu√≠do! 
${clientesInseridos} clientes adicionados, 
${clientesJaExistem} j√° existiam, 
${erros.length} erros encontrados.`;
    
    const resultado = {
      mensagem,
      totalLinhas: dados.length,
      clientesInseridos,
      clientesJaExistem,
      totalErros: erros.length,
      erros: erros.length > 0 ? erros : null,
      sucessos: sucessos.length > 0 ? sucessos.slice(0, 10) : null,
      // Adicionar informa√ß√µes de debug
      primeiraLinhaExemplo: dados[0] ? Object.keys(dados[0]) : null
    };
    
    console.log('üìã Resultado final:', resultado);
    
    res.json(resultado);
    
  } catch (error) {
    console.error('‚ùå Erro geral no upload:', error);
    res.status(500).json({ 
      erro: 'Erro ao processar arquivo Excel.',
      detalhes: error.message 
    });
  }
});

// ===================================
// NOVA ROTA: UPLOAD DE HIST√ìRICO DE SERVI√áOS - COM ESTAT√çSTICAS PERSISTENTES
// ===================================
app.post('/api/upload-servicos', verificarLogin, upload.single('excel'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ erro: 'Nenhum arquivo enviado.' });
    }
    
    // Ler arquivo Excel
    const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // Converter para JSON
    const dados = XLSX.utils.sheet_to_json(worksheet);
    
    if (dados.length === 0) {
      return res.status(400).json({ erro: 'Arquivo Excel est√° vazio ou n√£o possui dados v√°lidos.' });
    }
    
    let servicosAdicionados = 0;
    let clientesNovos = 0;
    let clientesAtualizados = 0;
    let erros = [];
    let sucessos = [];
    
    console.log(`üìä Processando ${dados.length} linhas do hist√≥rico de servi√ßos...`);
    
    // DEBUG: Mostrar estrutura da primeira linha
    console.log('üìã Estrutura da primeira linha:', dados[0]);
    console.log('üìã Chaves dispon√≠veis:', Object.keys(dados[0]));
    
    for (let i = 0; i < dados.length; i++) {
      const linha = dados[i];
      const numeroLinha = i + 2; // +2 porque linha 1 √© cabe√ßalho
      
      try {
        // üîß MAPEAMENTO DAS COLUNAS DO HIST√ìRICO
        const servico = linha.Servi√ßo || linha.servico || linha.SERVI√áO || 
                       linha.Servico || linha.SERVICE || linha.service || null;
        
        const cliente = linha.Cliente || linha.cliente || linha.CLIENTE || 
                       linha.Nome || linha.nome || linha.NOME || null;
        
        const telefone = linha.Telefone || linha.telefone || linha.TELEFONE || 
                        linha.phone || linha.celular || linha.Celular || null;
        
        const profissional = linha.Profissional || linha.profissional || linha.PROFISSIONAL ||
                            linha.Barbeiro || linha.barbeiro || linha.BARBEIRO ||
                            linha.Funcionario || linha.funcionario || null;
        
        const dataServico = linha.Data || linha.data || linha.DATA ||
                           linha['Data Servi√ßo'] || linha['Data do Servi√ßo'] ||
                           linha.date || linha.Date || null;
        
        // üîß VALIDA√á√ÉO DOS CAMPOS OBRIGAT√ìRIOS
        const telefoneValido = telefone && telefone.toString().trim() !== '' && telefone.toString().toLowerCase() !== 'vazio';
        const servicoValido = servico && servico.toString().trim() !== '' && servico.toString().toLowerCase() !== 'vazio';
        const profissionalValido = profissional && profissional.toString().trim() !== '' && profissional.toString().toLowerCase() !== 'vazio';
        const dataValida = dataServico && dataServico.toString().trim() !== '' && dataServico.toString().toLowerCase() !== 'vazio';
        
        if (!telefoneValido) {
          erros.push(`Linha ${numeroLinha}: Telefone obrigat√≥rio est√° vazio - Telefone: "${telefone || 'VAZIO'}"`);
          continue;
        }
        
        if (!servicoValido || !profissionalValido || !dataValida) {
          erros.push(`Linha ${numeroLinha}: Dados incompletos - Servi√ßo: "${servico || 'VAZIO'}", Profissional: "${profissional || 'VAZIO'}", Data: "${dataServico || 'VAZIO'}"`);
          continue;
        }
        
        // üîß LIMPEZA DOS DADOS COM FORMATA√á√ÉO DE TELEFONE
        const telefoneLimpo = formatarTelefone(telefone.toString().trim()); // ‚úÖ FORMATADO
        const servicoLimpo = servico.toString().trim();
        const profissionalLimpo = profissional.toString().trim();
        const clienteLimpo = cliente ? cliente.toString().trim() : 'Cliente';
        
        // üîß VALIDA√á√ÉO DE DATA DO SERVI√áO
        let dataServicoConvertida;
        try {
          const dataString = dataServico.toString().trim();
          
          if (dataString.includes('/')) {
            // Formato brasileiro DD/MM/YYYY
            const partes = dataString.split(' ')[0].split('/');
            if (partes.length === 3) {
              const [dia, mes, ano] = partes;
              dataServicoConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}T12:00:00.000Z`);
            }
          } else if (dataString.includes('-')) {
            // Formato YYYY-MM-DD ou DD-MM-YYYY
            const partes = dataString.split(' ')[0].split('-');
            if (partes.length === 3) {
              if (partes[0].length === 4) {
                dataServicoConvertida = new Date(`${partes[0]}-${partes[1].padStart(2, '0')}-${partes[2].padStart(2, '0')}T12:00:00.000Z`);
              } else {
                const [dia, mes, ano] = partes;
                dataServicoConvertida = new Date(`${ano}-${mes.padStart(2, '0')}-${dia.padStart(2, '0')}T12:00:00.000Z`);
              }
            }
          } else {
            dataServicoConvertida = new Date(dataString);
          }
          
          if (isNaN(dataServicoConvertida.getTime())) {
            erros.push(`Linha ${numeroLinha}: Data do servi√ßo "${dataString}" est√° em formato inv√°lido`);
            continue;
          }
          
        } catch (error) {
          erros.push(`Linha ${numeroLinha}: Erro ao processar data "${dataServico}"`);
          continue;
        }
        
        // üîç BUSCAR CLIENTE EXISTENTE POR TELEFONE
        const telefoneApenasNumeros = telefoneLimpo.replace(/\D/g, '');
        let clienteExistente = await Cliente.findOne({
          $or: [
            { telefone: telefoneLimpo },
            { telefone: { $regex: telefoneApenasNumeros, $options: 'i' } }
          ]
        });
        
        // Objeto do novo servi√ßo
        const novoServico = {
          servico: servicoLimpo,
          profissional: profissionalLimpo,
          dataServico: dataServicoConvertida
        };
        
        if (clienteExistente) {
          // ‚úÖ CLIENTE EXISTE - VERIFICAR NOME E ADICIONAR SERVI√áO
          console.log(`üîç Cliente encontrado: ${clienteExistente.nome} | Telefone: ${clienteExistente.telefone}`);
          
          // Verificar se o nome confere (opcional, mas registra diferen√ßas)
          if (clienteExistente.nome.toLowerCase() !== clienteLimpo.toLowerCase()) {
            console.log(`‚ö†Ô∏è Linha ${numeroLinha}: Nome diferente - Banco: "${clienteExistente.nome}" vs Planilha: "${clienteLimpo}"`);
          }
          
          // ‚úÖ CHECAR SE J√Å EXISTE SERVI√áO IGUAL NA MESMA DATA
          const jaTemServico = clienteExistente.historicoServicos && clienteExistente.historicoServicos.some(s =>
            s.servico.toLowerCase() === servicoLimpo.toLowerCase() &&
            new Date(s.dataServico).toISOString().split('T')[0] === dataServicoConvertida.toISOString().split('T')[0]
          );
          if (jaTemServico) {
            erros.push(`Linha ${numeroLinha}: Servi√ßo "${servicoLimpo}" j√° existe para o cliente "${clienteExistente.nome}" na data ${dataServicoConvertida.toISOString().split('T')[0]}`);
            continue;
          }
          
          // Adicionar servi√ßo ao hist√≥rico
          if (!clienteExistente.historicoServicos) {
            clienteExistente.historicoServicos = [];
          }
          
          clienteExistente.historicoServicos.push(novoServico);
          
          // Garantir que tem unidade JSP
          if (!clienteExistente.unidade) {
            clienteExistente.unidade = 'JSP';
          }
          
          await clienteExistente.save();
          clientesAtualizados++;
          servicosAdicionados++;
          
          sucessos.push(`‚úÖ ${clienteExistente.nome}: ${servicoLimpo} (${profissionalLimpo})`);
          console.log(`‚úÖ Servi√ßo adicionado ao cliente existente: ${clienteExistente.nome}`);
          
        } else {
          // ‚ùå CLIENTE N√ÉO EXISTE - CRIAR NOVO
          console.log(`‚ûï Criando novo cliente: ${clienteLimpo} | Telefone: ${telefoneLimpo}`);
          
          const novoCliente = new Cliente({
            nome: clienteLimpo,
            ddi: '55',  // DDI padr√£o SEM +
            telefone: telefoneLimpo, // ‚úÖ J√Å FORMATADO
            dataNascimento: null,  // Ser√° preenchido manualmente depois
            unidade: 'JSP',
            historicoServicos: [novoServico],
            criadoEm: new Date()
          });
          
          await novoCliente.save();
          clientesNovos++;
          servicosAdicionados++;
          
          sucessos.push(`‚ûï NOVO: ${clienteLimpo}: ${servicoLimpo} (${profissionalLimpo})`);
          console.log(`‚úÖ Novo cliente criado: ${clienteLimpo}`);
        }
        
      } catch (error) {
        erros.push(`Linha ${numeroLinha}: Erro ao processar - ${error.message}`);
        console.error(`‚ùå Erro na linha ${numeroLinha}:`, error);
      }
    }

   // üÜï NOVO: SALVAR NO HIST√ìRICO DE MOVIMENTO
    if (servicosAdicionados > 0 || erros.length > 0) {
      try {
        // Criar registro no hist√≥rico
        const novoHistorico = new HistoricoMovimento({
          dataImportacao: new Date(),
          nomeArquivo: req.file.originalname || 'Arquivo Excel',
          servicosAdicionados: servicosAdicionados,
          clientesAtualizados: clientesAtualizados,
          clientesNovos: clientesNovos,
          totalLinhasProcessadas: dados.length,
          totalErros: erros.length,
          usuarioImportacao: req.admin.nome || 'Admin'
        });
        
        await novoHistorico.save();
        
        // Atualizar estat√≠sticas existentes (compatibilidade)
        let stats = await EstatisticasMovimento.findOne();
        if (!stats) {
          stats = new EstatisticasMovimento();
        }
        
        const mesAtual = new Date().toISOString().slice(0, 7);
        if (stats.mesReferencia !== mesAtual) {
          stats.mesReferencia = mesAtual;
          stats.movimentosEsteMes = 0;
        }
        
        stats.ultimaImportacao = new Date();
        stats.totalMovimentos += servicosAdicionados;
        stats.movimentosEsteMes += servicosAdicionados;
        stats.ultimoArquivoImportado = req.file.originalname || 'Arquivo Excel';
        stats.atualizadoEm = new Date();
        
        await stats.save();
        
        console.log(`‚úÖ Hist√≥rico e estat√≠sticas de movimento atualizados: +${servicosAdicionados} movimentos`);
        
      } catch (error) {
        console.log('‚ö†Ô∏è Erro ao atualizar hist√≥rico de movimento (n√£o cr√≠tico):', error);
      }
    }
    
    // üîß RESPOSTA DETALHADA
    const mensagem = `üìä Hist√≥rico processado! 
${servicosAdicionados} servi√ßos adicionados, 
${clientesAtualizados} clientes atualizados, 
${clientesNovos} clientes novos criados, 
${erros.length} erros encontrados.`;
    
    const resultado = {
      mensagem,
      totalLinhas: dados.length,
      servicosAdicionados,
      clientesAtualizados,
      clientesNovos,
      totalErros: erros.length,
      erros: erros.length > 0 ? erros : null,
      sucessos: sucessos.length > 0 ? sucessos.slice(0, 10) : null,
      primeiraLinhaExemplo: dados[0] ? Object.keys(dados[0]) : null
    };
    
    console.log('üìã Resultado final do hist√≥rico:', resultado);
    
    res.json(resultado);
    
  } catch (error) {
    console.error('‚ùå Erro geral no upload do hist√≥rico:', error);
    res.status(500).json({ 
      erro: 'Erro ao processar arquivo de hist√≥rico.',
      detalhes: error.message 
    });
  }
});

// ===================================
// ROTAS DA API - COMUNICA√á√ïES (PROTEGIDAS)
// ===================================

// Listar todas as comunica√ß√µes
app.get('/api/comunicacoes', verificarLogin, async (req, res) => {
  try {
    const comunicacoes = await Comunicacao.find()
      .sort({ criadoEm: -1 })
      .select('-clientes'); // N√£o incluir dados dos clientes na listagem
    
    // Adicionar contagem de realizados para cada comunica√ß√£o
    const comunicacoesComRealizados = comunicacoes.map(comunicacao => {
      const realizados = comunicacao.realizados ? 
        comunicacao.realizados.filter(item => item.realizado).length : 0;
      
      return {
        ...comunicacao.toObject(),
        clientesRealizados: realizados
      };
    });
    
    res.json(comunicacoesComRealizados);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar comunica√ß√µes.' });
  }
});

// Buscar comunica√ß√£o por ID (com clientes)
app.get('/api/comunicacoes/:id', verificarLogin, async (req, res) => {
  try {
    const comunicacao = await Comunicacao.findById(req.params.id);
    if (!comunicacao) {
      return res.status(404).json({ erro: 'Comunica√ß√£o n√£o encontrada.' });
    }
    res.json(comunicacao);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar comunica√ß√£o.' });
  }
});

// Criar nova comunica√ß√£o (processar arquivo do Wasender)
app.post('/api/comunicacoes', verificarLogin, upload.single('excel'), async (req, res) => {
  try {
    const { titulo } = req.body;
    
    if (!req.file) {
      return res.status(400).json({ erro: 'Arquivo Excel √© obrigat√≥rio.' });
    }
    
    if (!titulo || titulo.trim() === '') {
      return res.status(400).json({ erro: 'T√≠tulo da comunica√ß√£o √© obrigat√≥rio.' });
    }
    
    // Ler arquivo Excel
    const workbook = XLSX.read(req.file.buffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const worksheet = workbook.Sheets[sheetName];
    
    // Converter para JSON - pegar dados a partir da linha 2
    const dados = XLSX.utils.sheet_to_json(worksheet); // Processa todas as linhas
    
    if (dados.length === 0) {
      return res.status(400).json({ erro: 'Arquivo Excel est√° vazio ou n√£o possui dados v√°lidos.' });
    }
    
    console.log(`üìä Processando comunica√ß√£o "${titulo}" com ${dados.length} n√∫meros...`);
    
    // Buscar todos os clientes para compara√ß√£o
    const todosClientes = await Cliente.find({}, 'nome telefone ddi unidade').lean();
    console.log(`üì± Total de clientes no banco: ${todosClientes.length}`);
    
    let clientesEncontrados = 0;
    let clientesNaoEncontrados = 0;
    const clientesResultado = [];
    
    for (let i = 0; i < dados.length; i++) {
      const linha = dados[i];
      
      // Pegar n√∫mero da primeira coluna (coluna A)
      const numeroOriginal = linha[Object.keys(linha)[0]]; // Primeira coluna
      
      if (!numeroOriginal || numeroOriginal.toString().trim() === '') {
        console.log(`‚ö†Ô∏è Linha ${i + 2}: N√∫mero vazio, pulando`);
        continue;
      }
      
      const numeroLimpo = numeroOriginal.toString().trim();
      console.log(`üîç Processando n√∫mero: ${numeroLimpo}`);
      
      // Extrair DDI e telefone do n√∫mero completo
      let ddiExtraido = '';
      let telefoneExtraido = '';
      
      if (numeroLimpo.startsWith('55') && numeroLimpo.length >= 12) {
        // N√∫mero brasileiro: 5511994338072
        ddiExtraido = '55';
        telefoneExtraido = numeroLimpo.slice(2); // Remove DDI 55
      } else if (numeroLimpo.startsWith('1') && numeroLimpo.length >= 11) {
        // N√∫mero americano: 15126354104
        ddiExtraido = '1';
        telefoneExtraido = numeroLimpo.slice(1); // Remove DDI 1
      } else {
        // Outros pa√≠ses - tentar detectar automaticamente
        // Verificar DDIs comuns de 2-3 d√≠gitos
        const ddisComuns = ['55', '1', '44', '33', '49', '39', '34', '351', '52', '54'];
        let encontrouDDI = false;
        
        for (const ddi of ddisComuns) {
          if (numeroLimpo.startsWith(ddi)) {
            ddiExtraido = ddi;
            telefoneExtraido = numeroLimpo.slice(ddi.length);
            encontrouDDI = true;
            break;
          }
        }
        
        if (!encontrouDDI) {
          // Assumir que √© n√∫mero brasileiro sem DDI ou formato desconhecido
          ddiExtraido = '55';
          telefoneExtraido = numeroLimpo;
        }
      }
      
      // Formatar telefone extra√≠do
      const telefoneFormatado = formatarTelefone(telefoneExtraido);
      console.log(`üìû Extra√≠do - DDI: ${ddiExtraido}, Telefone: ${telefoneFormatado}`);
      
      // Buscar cliente no banco de dados
      const telefoneApenasNumeros = telefoneExtraido.replace(/\D/g, '');
      
      const clienteEncontrado = todosClientes.find(cliente => {
        const clienteDDI = cliente.ddi || '55';
        const clienteTelefoneNumeros = cliente.telefone.replace(/\D/g, '');
        
        // Comparar DDI + telefone (apenas n√∫meros)
        return clienteDDI === ddiExtraido && clienteTelefoneNumeros === telefoneApenasNumeros;
      });
      
      if (clienteEncontrado) {
        clientesEncontrados++;
        clientesResultado.push({
          numeroOriginal: numeroLimpo,
          encontrado: true,
          clienteId: clienteEncontrado._id,
          cliente: clienteEncontrado
        });
        console.log(`‚úÖ Cliente encontrado: ${clienteEncontrado.nome}`);
      } else {
        clientesNaoEncontrados++;
        clientesResultado.push({
          numeroOriginal: numeroLimpo,
          encontrado: false,
          clienteId: null,
          cliente: null
        });
        console.log(`‚ùå Cliente n√£o encontrado para: ${ddiExtraido} ${telefoneFormatado}`);
      }
    }
    
    // Criar comunica√ß√£o no banco
    const novaComunicacao = new Comunicacao({
      titulo: titulo.trim(),
      totalClientes: dados.length,
      clientesEncontrados,
      clientesNaoEncontrados,
      clientes: clientesResultado
    });
    
    await novaComunicacao.save();
    
    const taxaSucesso = Math.round((clientesEncontrados / dados.length) * 100);
    
    const mensagem = `‚úÖ Comunica√ß√£o "${titulo}" processada com sucesso! 
${clientesEncontrados} clientes encontrados (${taxaSucesso}%), 
${clientesNaoEncontrados} n√£o encontrados.`;
    
    console.log(`üìä Comunica√ß√£o salva - ID: ${novaComunicacao._id}`);
    
    res.json({
      mensagem,
      comunicacaoId: novaComunicacao._id,
      totalProcessados: dados.length,
      clientesEncontrados,
      clientesNaoEncontrados,
      taxaSucesso: `${taxaSucesso}%`
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao processar comunica√ß√£o:', error);
    res.status(500).json({ 
      erro: 'Erro ao processar comunica√ß√£o.',
      detalhes: error.message 
    });
  }
});

// Buscar comunica√ß√µes de um cliente espec√≠fico
app.get('/api/clientes/:id/comunicacoes', verificarLogin, async (req, res) => {
  try {
    const clienteId = req.params.id;
    
    // Buscar comunica√ß√µes onde este cliente foi encontrado
    const comunicacoes = await Comunicacao.find({
      'clientes.clienteId': clienteId,
      'clientes.encontrado': true
    })
    .sort({ criadoEm: -1 })
    .select('titulo criadoEm totalClientes clientesEncontrados realizados _id')
    .limit(10); // Limitar √†s 10 mais recentes
    
    // Adicionar informa√ß√£o se este cliente espec√≠fico foi marcado como realizado
    const comunicacoesComStatus = comunicacoes.map(comunicacao => {
      const foiRealizado = comunicacao.realizados ? 
        comunicacao.realizados.some(item => item.clienteId === clienteId && item.realizado) : false;
      
      const totalRealizados = comunicacao.realizados ? 
        comunicacao.realizados.filter(item => item.realizado).length : 0;
      
      return {
        ...comunicacao.toObject(),
        clienteRealizado: foiRealizado,
        totalRealizados: totalRealizados
      };
    });
    
    res.json(comunicacoesComStatus);
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao buscar comunica√ß√µes do cliente.' });
  }
});

// Deletar comunica√ß√£o
app.delete('/api/comunicacoes/:id', verificarLogin, async (req, res) => {
  try {
    const comunicacaoDeletada = await Comunicacao.findByIdAndDelete(req.params.id);
    
    if (!comunicacaoDeletada) {
      return res.status(404).json({ erro: 'Comunica√ß√£o n√£o encontrada.' });
    }
    
    res.json({ mensagem: 'Comunica√ß√£o deletada com sucesso.' });
  } catch (error) {
    res.status(500).json({ erro: 'Erro ao deletar comunica√ß√£o.' });
  }
});

// ===================================
// ROTAS DA API - REALIZADOS (PROTEGIDAS)
// ===================================

// Buscar status de realizados de uma comunica√ß√£o
app.get('/api/comunicacoes/:id/realizados', verificarLogin, async (req, res) => {
  try {
    const comunicacao = await Comunicacao.findById(req.params.id).select('realizados');
    
    if (!comunicacao) {
      return res.status(404).json({ erro: 'Comunica√ß√£o n√£o encontrada.' });
    }
    
    // Retornar array de clienteIds realizados para compatibilidade
    const clientesRealizados = comunicacao.realizados
      .filter(item => item.realizado)
      .map(item => item.clienteId);
    
    res.json({ clientesRealizados });
  } catch (error) {
    console.error('‚ùå Erro ao buscar realizados:', error);
    res.status(500).json({ erro: 'Erro ao buscar status de realizados.' });
  }
});

// Atualizar status de realizado de um cliente espec√≠fico
app.put('/api/comunicacoes/:id/realizados/:clienteId', verificarLogin, async (req, res) => {
  try {
    const { id, clienteId } = req.params;
    const { realizado } = req.body;
    
    const comunicacao = await Comunicacao.findById(id);
    
    if (!comunicacao) {
      return res.status(404).json({ erro: 'Comunica√ß√£o n√£o encontrada.' });
    }
    
    // Procurar se j√° existe um registro para este cliente
    const indiceExistente = comunicacao.realizados.findIndex(
      item => item.clienteId === clienteId
    );
    
    if (indiceExistente >= 0) {
      // Atualizar registro existente
      comunicacao.realizados[indiceExistente].realizado = realizado;
      comunicacao.realizados[indiceExistente].dataRealizacao = new Date();
    } else {
      // Criar novo registro
      comunicacao.realizados.push({
        clienteId: clienteId,
        realizado: realizado,
        dataRealizacao: new Date()
      });
    }
    
    await comunicacao.save();
    
    res.json({ 
      mensagem: `Cliente ${realizado ? 'marcado como realizado' : 'desmarcado'} com sucesso.`,
      clienteId,
      realizado,
      dataRealizacao: new Date()
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar realizado:', error);
    res.status(500).json({ erro: 'Erro ao atualizar status de realizado.' });
  }
});

// Atualizar status de realizados em massa
app.put('/api/comunicacoes/:id/realizados', verificarLogin, async (req, res) => {
  try {
    const { id } = req.params;
    const { clienteIds, realizado } = req.body;
    
    if (!Array.isArray(clienteIds) || clienteIds.length === 0) {
      return res.status(400).json({ erro: 'Lista de cliente IDs √© obrigat√≥ria.' });
    }
    
    const comunicacao = await Comunicacao.findById(id);
    
    if (!comunicacao) {
      return res.status(404).json({ erro: 'Comunica√ß√£o n√£o encontrada.' });
    }
    
    const dataAtual = new Date();
    let atualizados = 0;
    
    // Processar cada cliente ID
    clienteIds.forEach(clienteId => {
      const indiceExistente = comunicacao.realizados.findIndex(
        item => item.clienteId === clienteId
      );
      
      if (indiceExistente >= 0) {
        // Atualizar registro existente
        comunicacao.realizados[indiceExistente].realizado = realizado;
        comunicacao.realizados[indiceExistente].dataRealizacao = dataAtual;
      } else {
        // Criar novo registro
        comunicacao.realizados.push({
          clienteId: clienteId,
          realizado: realizado,
          dataRealizacao: dataAtual
        });
      }
      atualizados++;
    });
    
    await comunicacao.save();
    
    res.json({ 
      mensagem: `${atualizados} clientes ${realizado ? 'marcados como realizados' : 'desmarcados'} com sucesso.`,
      atualizados,
      realizado,
      dataRealizacao: dataAtual
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar realizados em massa:', error);
    res.status(500).json({ erro: 'Erro ao atualizar status de realizados em massa.' });
  }
});

// ===================================
// FUN√á√ÉO PARA CRIAR ADMIN INICIAL (APENAS PARA DESENVOLVIMENTO)
// ===================================
async function criarAdminInicial() {
  try {
    const adminExistente = await Admin.findOne();
    if (!adminExistente) {
      const adminInicial = new Admin({
        nome: 'Admin Principal',
        email: 'admin@barbearia.com',
        senha: '123456',
        tipo: 'admin'
      });
      
      await adminInicial.save();
      console.log('üîë Admin inicial criado!');
      console.log('üìß Email: admin@barbearia.com');
      console.log('üîí Senha: 123456');
      console.log('‚ö†Ô∏è  ALTERE ESTA SENHA NO PRIMEIRO LOGIN!');
    }
  } catch (error) {
    console.log('Erro ao criar admin inicial:', error);
  }
}

// ===================================
// FUN√á√ÉO AUXILIAR: FORMATA√á√ÉO DE TELEFONE
// ===================================
function formatarTelefone(telefone) {
  if (!telefone) return '';
  
  // Remove tudo que n√£o √© n√∫mero
  const apenasNumeros = telefone.toString().replace(/\D/g, '');
  
  // Se tem 11 d√≠gitos (celular com DDD)
  if (apenasNumeros.length === 11) {
    return `(${apenasNumeros.slice(0, 2)}) ${apenasNumeros.slice(2, 7)}-${apenasNumeros.slice(7)}`;
  }
  // Se tem 10 d√≠gitos (fixo com DDD)  
  else if (apenasNumeros.length === 10) {
    return `(${apenasNumeros.slice(0, 2)}) ${apenasNumeros.slice(2, 6)}-${apenasNumeros.slice(6)}`;
  }
  // Se tem 9 d√≠gitos (celular sem DDD)
  else if (apenasNumeros.length === 9) {
    return `${apenasNumeros.slice(0, 5)}-${apenasNumeros.slice(5)}`;
  }
  // Se tem 8 d√≠gitos (fixo sem DDD)
  else if (apenasNumeros.length === 8) {
    return `${apenasNumeros.slice(0, 4)}-${apenasNumeros.slice(4)}`;
  }
  // Para outros tamanhos, retorna apenas os n√∫meros
  else {
    return apenasNumeros;
  }
}

// ===================================
// INICIAR SERVIDOR
// ===================================
app.listen(PORT, () => {
  console.log(`üöÄ Servidor rodando na porta ${PORT}`);
  console.log(`üì± Acesse: http://localhost:${PORT}`);
  
  // Criar admin inicial se n√£o existir
  criarAdminInicial();
});